import os

Import('env')
local_env = env.Clone()
local_env.Append(CPPPATH='.')
objects = []
for c in Glob('*.c'):
    objects.append(local_env.Command('${SOURCE.file}${OBJSUFFIX}', c,
                   '${recipe_c_o_pattern}',
                   source_file='${SOURCE}',
                   object_file='${TARGET}'))
for cpp in Glob('*.cpp'):
    if os.path.basename(cpp.path).lower() != 'main.cpp':
        objects.append(local_env.Command('${SOURCE.file}${OBJSUFFIX}', cpp,
                       '${recipe_cpp_o_pattern}',
                       source_file='${SOURCE}',
                       object_file='${TARGET}'))
for c in Glob('*.S'):
    objects.append(local_env.Command('${SOURCE.file}${OBJSUFFIX}', c,
                                     '${recipe_S_o_pattern}',
                                     source_file='${SOURCE}',
                                     object_file='${TARGET}'))
local_env.Command('${LIBPREFIX}core${LIBSUFFIX}', objects,
                  '${recipe_ar_pattern}',
                  recipe_ar_pattern=local_env['recipe_ar_pattern'].replace(
                      '"${object_file}"', '${SOURCES}'),
                  archive_file='${TARGET.file}')
